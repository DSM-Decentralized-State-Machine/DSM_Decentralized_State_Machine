--- storage_client.rs
+++ storage_client.rs
@@ -124,6 +124,8 @@
             .map_err(|e| DsmError::Network {
                 context: format!("Failed to create HTTP client: {}", e),
                 source: Some(Box::new(e)),
+                entity: "http_client".to_string(),
+                details: Some("Client initialization failed".to_string()),
             })?;

@@ -162,6 +164,8 @@
             .map_err(|e| DsmError::Network {
                 context: format!("Failed to create HTTP client: {}", e),
                 source: Some(Box::new(e)),
+                entity: "http_client".to_string(),
+                details: Some("Client initialization failed".to_string()),
             })?;

@@ -191,6 +195,8 @@
             .map_err(|e| DsmError::Network {
                 context: format!("Failed to create URL: {}", e),
                 source: Some(Box::new(e)),
+                entity: "url".to_string(),
+                details: Some("URL creation failed".to_string()),
             })?;

@@ -201,6 +207,8 @@
             .map_err(|e| DsmError::Network {
                 context: format!("Failed to send request: {}", e),
                 source: Some(Box::new(e)),
+                entity: "http_request".to_string(),
+                details: Some("Request failed".to_string()),
             })?;

@@ -289,6 +297,8 @@
             return Err(DsmError::Network {
                 context: format!("Storage node returned error: {}", response.status()),
                 source: None,
+                entity: "storage_node".to_string(),
+                details: Some(format!("HTTP status: {}", response.status())),
             });
         }

@@ -304,6 +314,8 @@
             bincode::deserialize(genesis_bytes).map_err(|e| DsmError::Serialization {
                 context: format!("Failed to deserialize genesis state: {}", e),
                 source: Some(Box::new(e)),
+                entity: "genesis_state".to_string(),
+                details: Some("Deserialization failed".to_string()),
             })?;

@@ -310,6 +322,8 @@
         if self.auto_cache_enabled {
             self.storage_cache.store_genesis(hash_hex, &genesis).await.map_err(|e| DsmError::Storage {
                 context: format!("Failed to cache genesis state: {}", e),
+                entity: "genesis_state".to_string(),
+                details: Some("Cache operation failed".to_string()),
                 source: Some(Box::new(e)),
             })?;
         }

@@ -342,6 +356,8 @@
             .map_err(|e| DsmError::Network {
                 context: format!("Failed to create URL: {}", e),
                 source: Some(Box::new(e)),
+                entity: "url".to_string(),
+                details: Some("URL creation failed".to_string()),
             })?;

@@ -353,6 +369,8 @@
             return Err(DsmError::Network {
                 context: format!("Storage node returned error: {}", response.status()),
                 source: None,
+                entity: "storage_node".to_string(),
+                details: Some(format!("HTTP status: {}", response.status())),
             });
         }

@@ -363,6 +381,8 @@
             bincode::deserialize(token_bytes).map_err(|e| DsmError::Serialization {
                 context: format!("Failed to deserialize token: {}", e),
                 source: Some(Box::new(e)),
+                entity: "token".to_string(),
+                details: Some("Deserialization failed".to_string()),
             })?;

@@ -370,6 +390,8 @@
         if self.auto_cache_enabled {
             self.storage_cache.store_token(token_id, &token).await.map_err(|e| DsmError::Storage {
                 context: format!("Failed to cache token: {}", e),
+                entity: "token".to_string(),
+                details: Some("Cache operation failed".to_string()),
                 source: Some(Box::new(e)),
             })?;
         }

@@ -412,6 +434,8 @@
             .map_err(|e| DsmError::Network {
                 context: format!("Failed to create URL: {}", e),
                 source: Some(Box::new(e)),
+                entity: "url".to_string(),
+                details: Some("URL creation failed".to_string()),
             })?;

@@ -423,6 +447,8 @@
             return Err(DsmError::Network {
                 context: format!("Storage node returned error: {}", response.status()),
                 source: None,
+                entity: "storage_node".to_string(),
+                details: Some(format!("HTTP status: {}", response.status())),
             });
         }

@@ -433,6 +459,8 @@
             bincode::deserialize(checkpoint_bytes).map_err(|e| DsmError::Serialization {
                 context: format!("Failed to deserialize checkpoint: {}", e),
                 source: Some(Box::new(e)),
+                entity: "checkpoint".to_string(),
+                details: Some("Deserialization failed".to_string()),
             })?;

@@ -440,6 +468,8 @@
         if self.auto_cache_enabled {
             self.storage_cache.store_checkpoint(state_hash, &checkpoint).await.map_err(|e| DsmError::Storage {
                 context: format!("Failed to cache checkpoint: {}", e),
+                entity: "checkpoint".to_string(),
+                details: Some("Cache operation failed".to_string()),
                 source: Some(Box::new(e)),
             })?;
         }

@@ -477,6 +507,8 @@
             .map_err(|e| DsmError::Network {
                 context: format!("Failed to create URL: {}", e),
                 source: Some(Box::new(e)),
+                entity: "url".to_string(),
+                details: Some("URL creation failed".to_string()),
             })?;

@@ -488,6 +520,8 @@
             return Err(DsmError::Network {
                 context: format!("Storage node returned error: {}", response.status()),
                 source: None,
+                entity: "storage_node".to_string(),
+                details: Some(format!("HTTP status: {}", response.status())),
             });
         }

@@ -498,6 +532,8 @@
             bincode::deserialize(marker_bytes).map_err(|e| DsmError::Serialization {
                 context: format!("Failed to deserialize invalidation marker: {}", e),
                 source: Some(Box::new(e)),
+                entity: "invalidation_marker".to_string(),
+                details: Some("Deserialization failed".to_string()),
             })?;

@@ -505,6 +541,8 @@
         if self.auto_cache_enabled {
             self.storage_cache.store_invalidation_marker(state_hash, &marker).await.map_err(|e| DsmError::Storage {
                 context: format!("Failed to cache invalidation marker: {}", e),
+                entity: "invalidation_marker".to_string(),
+                details: Some("Cache operation failed".to_string()),
                 source: Some(Box::new(e)),
             })?;
         }

@@ -553,6 +591,8 @@
             .map_err(|e| DsmError::Network {
                 context: format!("Failed to create URL: {}", e),
                 source: Some(Box::new(e)),
+                entity: "url".to_string(),
+                details: Some("URL creation failed".to_string()),
             })?;

@@ -564,6 +604,8 @@
             return Err(DsmError::Network {
                 context: format!("Storage node returned error: {}", response.status()),
                 source: None,
+                entity: "storage_node".to_string(),
+                details: Some(format!("HTTP status: {}", response.status())),
             });
         }

@@ -574,6 +616,8 @@
             response.json().await.map_err(|e| DsmError::Serialization {
                 context: format!("Failed to deserialize inbox entries: {}", e),
                 source: Some(Box::new(e)),
+                entity: "inbox_entries".to_string(),
+                details: Some("Deserialization failed".to_string()),
             })?;

@@ -581,6 +625,8 @@
         // Process inbox entries
         let mut inbox_entries = entries
             .into_iter()
             .map(|entry| {
                 let entry_obj = entry
                     .as_object()
                     .ok_or_else(|| DsmError::Serialization {
                         context: "Invalid inbox entry format".into(),
                         source: None,
+                        entity: "inbox_entry".to_string(),
+                        details: Some("Expected JSON object".to_string()),
                     })?;

@@ -587,6 +633,8 @@
                 let sender = entry_obj
                     .get("sender")
                     .ok_or_else(|| DsmError::Serialization {
                         context: "Missing sender field".into(),
                         source: None,
+                        entity: "inbox_entry".to_string(),
+                        details: Some("Sender field missing".to_string()),
                     })?
                     .as_str()
                     .ok_or_else(|| DsmError::Serialization {
                         context: "Invalid sender field format".into(),
                         source: None,
+                        entity: "inbox_entry".to_string(),
+                        details: Some("Expected string for sender".to_string()),
                     })?
                     .to_string();

@@ -609,6 +657,8 @@
                         .ok_or_else(|| DsmError::Serialization {
                             context: "Invalid payload format".into(),
                             source: None,
+                            entity: "inbox_entry".to_string(),
+                            details: Some("Expected string for payload".to_string()),
                         })?;

@@ -657,6 +707,8 @@
             .map_err(|e| DsmError::Network {
                 context: format!("Failed to create URL: {}", e),
                 source: Some(Box::new(e)),
+                entity: "url".to_string(),
+                details: Some("URL creation failed".to_string()),
             })?;

@@ -668,6 +720,8 @@
             return Err(DsmError::Network {
                 context: format!("Storage node returned error: {}", response.status()),
                 source: None,
+                entity: "storage_node".to_string(),
+                details: Some(format!("HTTP status: {}", response.status())),
             });
         }

@@ -674,6 +728,8 @@
         let vault: LimboVault = if response.status() == reqwest::StatusCode::OK {
             response.json().await.map_err(|e| DsmError::Serialization {
                 context: format!("Failed to deserialize vault: {}", e),
+                entity: "vault".to_string(),
+                details: Some("Deserialization failed".to_string()),
                 source: Some(Box::new(e)),
             })?
         } else {
@@ -681,6 +737,8 @@
             return Err(DsmError::NotFound {
                 entity: "vault".to_string(),
                 context: format!("Vault with ID {} not found", vault_id),
+                details: Some(vault_id.to_string()),
+                source: None,
             });
         };
